{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Planes de Mejoramiento - Programa ADSO","text":""},{"location":"#analisis-y-desarrollo-de-sistemas-de-informacion","title":"An\u00e1lisis y Desarrollo de Sistemas de Informaci\u00f3n","text":""},{"location":"#introduccion","title":"Introducci\u00f3n","text":"<p>Bienvenido a la documentaci\u00f3n de los Planes de Mejoramiento del programa de formaci\u00f3n An\u00e1lisis y Desarrollo de Sistemas de Informaci\u00f3n (ADSO) del Servicio Nacional de Aprendizaje (SENA), con \u00e9nfasis en el \u00e1rea de Desarrollo de Software.</p>"},{"location":"#proposito","title":"Prop\u00f3sito","text":"<p>Los planes de mejoramiento constituyen una estrategia pedag\u00f3gica fundamental dise\u00f1ada para fortalecer y consolidar las competencias t\u00e9cnicas y transversales de los aprendices en el campo del desarrollo de software. Estos planes tienen como objetivo principal:</p> <ul> <li>Reforzar conocimientos: Consolidar conceptos fundamentales y habilidades t\u00e9cnicas esenciales para el desarrollo profesional</li> <li>Cerrar brechas de aprendizaje: Identificar y abordar \u00e1reas de oportunidad en el proceso formativo</li> <li>Desarrollar competencias espec\u00edficas: Fortalecer habilidades particulares requeridas en el \u00e1mbito laboral del desarrollo de software</li> <li>Promover el aprendizaje aut\u00f3nomo: Fomentar la capacidad de autogesti\u00f3n del conocimiento y la mejora continua</li> </ul>"},{"location":"#alcance","title":"Alcance","text":"<p>Los planes de mejoramiento del programa ADSO abarcan las siguientes dimensiones:</p>"},{"location":"#competencias-tecnicas","title":"Competencias T\u00e9cnicas","text":"<ul> <li>An\u00e1lisis y dise\u00f1o de sistemas de informaci\u00f3n</li> <li>Desarrollo de aplicaciones y soluciones software</li> <li>Gesti\u00f3n de bases de datos y manejo de informaci\u00f3n</li> <li>Implementaci\u00f3n de metodolog\u00edas de desarrollo</li> <li>Pruebas y control de calidad de software</li> <li>Documentaci\u00f3n t\u00e9cnica y de usuario</li> </ul>"},{"location":"#competencias-transversales","title":"Competencias Transversales","text":"<ul> <li>Trabajo en equipo y colaboraci\u00f3n</li> <li>Comunicaci\u00f3n efectiva</li> <li>Resoluci\u00f3n de problemas</li> <li>Pensamiento cr\u00edtico y anal\u00edtico</li> <li>Adaptabilidad y aprendizaje continuo</li> <li>\u00c9tica profesional y responsabilidad social</li> </ul>"},{"location":"#modalidades-de-implementacion","title":"Modalidades de Implementaci\u00f3n","text":"<ul> <li>Actividades individuales: Ejercicios pr\u00e1cticos, proyectos personales y estudios de caso</li> <li>Trabajo colaborativo: Proyectos en equipo y din\u00e1micas grupales</li> <li>Mentor\u00edas: Acompa\u00f1amiento personalizado con instructores</li> <li>Autoevaluaci\u00f3n: Herramientas de reflexi\u00f3n y seguimiento del progreso</li> </ul>"},{"location":"#beneficios","title":"Beneficios","text":"<p>La implementaci\u00f3n de los planes de mejoramiento genera m\u00faltiples beneficios tanto para los aprendices como para el programa formativo:</p>"},{"location":"#para-los-aprendices","title":"Para los Aprendices","text":"<ul> <li>Fortalecimiento de competencias: Desarrollo s\u00f3lido de habilidades t\u00e9cnicas y blandas</li> <li>Mejor preparaci\u00f3n laboral: Mayor readiness para el mercado de trabajo en desarrollo de software</li> <li>Confianza profesional: Incremento en la seguridad para enfrentar desaf\u00edos t\u00e9cnicos</li> <li>Networking: Oportunidades de colaboraci\u00f3n y construcci\u00f3n de redes profesionales</li> <li>Portafolio robusto: Desarrollo de proyectos que demuestran capacidades t\u00e9cnicas</li> </ul>"},{"location":"#para-el-programa-formativo","title":"Para el Programa Formativo","text":"<ul> <li>Calidad educativa: Mejora continua en los procesos de ense\u00f1anza-aprendizaje</li> <li>Pertinencia laboral: Alineaci\u00f3n con las necesidades del sector productivo</li> <li>Indicadores de gesti\u00f3n: Mejores resultados en evaluaciones y seguimiento</li> <li>Reconocimiento institucional: Fortalecimiento de la imagen y prestigio del programa</li> </ul>"},{"location":"#estructura-de-la-documentacion","title":"Estructura de la Documentaci\u00f3n","text":"<p>Esta documentaci\u00f3n est\u00e1 organizada para facilitar la navegaci\u00f3n y comprensi\u00f3n de los diferentes componentes de los planes de mejoramiento:</p> <ul> <li>Fundamentos te\u00f3ricos: Bases conceptuales y metodol\u00f3gicas</li> <li>Gu\u00edas de implementaci\u00f3n: Procedimientos y mejores pr\u00e1cticas</li> <li>Recursos y herramientas: Materiales de apoyo y plataformas tecnol\u00f3gicas</li> <li>Casos de estudio: Ejemplos pr\u00e1cticos y experiencias exitosas</li> <li>Evaluaci\u00f3n y seguimiento: M\u00e9tricas e indicadores de progreso</li> </ul>"},{"location":"#compromiso-con-la-excelencia","title":"Compromiso con la Excelencia","text":"<p>Los planes de mejoramiento del programa ADSO reflejan el compromiso del SENA con la formaci\u00f3n integral de profesionales competentes, \u00e9ticos y comprometidos con el desarrollo tecnol\u00f3gico del pa\u00eds. A trav\u00e9s de estos planes, buscamos formar desarrolladores de software capaces de contribuir significativamente al crecimiento del sector TIC y a la transformaci\u00f3n digital de las organizaciones.</p>"},{"location":"blog/","title":"Blog","text":""},{"location":"content/entrega/","title":"Cronograma de Entrega - Planes de Mejoramiento","text":""},{"location":"content/entrega/#sistema-de-asistencia-de-estudiantes","title":"Sistema de Asistencia de Estudiantes","text":""},{"location":"content/entrega/#fechas-importantes","title":"\ud83d\udcc5 Fechas Importantes","text":""},{"location":"content/entrega/#fecha-de-inicio-del-plan-de-mejoramiento","title":"Fecha de Inicio del Plan de Mejoramiento","text":"<p>Miercoles, 20 de Agosto de 2025</p> <ul> <li>Inicio oficial de los planes de mejoramiento</li> <li>Entrega de documentaci\u00f3n y r\u00fabricas de evaluaci\u00f3n</li> <li>Inicio del per\u00edodo de preparaci\u00f3n y desarrollo</li> </ul>"},{"location":"content/entrega/#fecha-de-entrega-final","title":"Fecha de Entrega Final","text":"<p>Viernes, 5 de Septiembre de 2025 - 7:00 AM - Entrega obligatoria de ambos proyectos funcionando - Repositorios en GitHub completamente documentados - Preparaci\u00f3n para demostraciones en vivo</p>"},{"location":"content/entrega/#cronograma-del-dia-de-evaluacion","title":"\u23f0 Cronograma del D\u00eda de Evaluaci\u00f3n","text":"<p>Fecha: Viernes, 5 de Septiembre de 2025</p>"},{"location":"content/entrega/#700-am-800-am-demostracion-de-funcionamiento","title":"\ud83c\udfaf 7:00 AM - 8:00 AM: Demostraci\u00f3n de Funcionamiento","text":"<p>Duraci\u00f3n: 60 minutos</p> <p>Plan de Mejoramiento 1 (Frontend - Vanilla JavaScript) - Tiempo asignado: 20 minutos - Actividades:</p> <ul> <li>Demostraci\u00f3n de la p\u00e1gina web funcionando</li> <li>Navegaci\u00f3n por todas las funcionalidades b\u00e1sicas</li> <li>Consumo de API REST (GET y POST)</li> <li>Validaci\u00f3n de formularios</li> <li>Responsive design</li> </ul> <p>Plan de Mejoramiento 2 (Backend - NestJS API REST) - Tiempo asignado: 30 minutos - Actividades:</p> <ul> <li>Demostraci\u00f3n de la API REST funcionando</li> <li>Pruebas con Postman/Thunder Client</li> <li>Operaciones CRUD completas</li> <li>Validaciones y manejo de errores</li> <li>Consulta de base de datos</li> </ul> <p>Tiempo de transici\u00f3n: 10 minutos</p>"},{"location":"content/entrega/#800-am-900-am-desarrollo-de-proyecto-api-rest","title":"\ud83d\udee0\ufe0f 8:00 AM - 9:00 AM: Desarrollo de Proyecto API REST","text":"<p>Duraci\u00f3n: 60 minutos Plan de Mejoramiento P0 - Backend NestJS</p> <p>Actividades en tiempo real:</p> <ul> <li>Configuraci\u00f3n del entorno (Node.js, NestJS CLI)</li> <li>Dise\u00f1o de esquema Prisma</li> <li>Creaci\u00f3n de modelos de datos</li> <li>Implementaci\u00f3n de controladores y servicios</li> <li>Desarrollo de endpoints CRUD</li> <li>Configuraci\u00f3n de DTOs y validaciones</li> <li>Explicaci\u00f3n detallada del proceso</li> </ul> <p>Criterios de evaluaci\u00f3n:</p> <ul> <li>Comprensi\u00f3n de arquitectura NestJS</li> <li>Implementaci\u00f3n correcta de Prisma</li> <li>Inyecci\u00f3n de dependencias</li> <li>Buenas pr\u00e1cticas de desarrollo</li> </ul>"},{"location":"content/entrega/#900-am-1000-am-desarrollo-web-vanilla-javascript","title":"\ud83c\udf10 9:00 AM - 10:00 AM: Desarrollo Web Vanilla JavaScript","text":"<p>Duraci\u00f3n: 60 minutos Plan de Mejoramiento P1 - Frontend</p> <p>Actividades en tiempo real:</p> <ul> <li>Estructura HTML b\u00e1sica</li> <li>Implementaci\u00f3n de estilos CSS simples</li> <li>Desarrollo de JavaScript b\u00e1sico</li> <li>Integraci\u00f3n con API REST</li> <li>Manejo de eventos y DOM</li> <li>Validaci\u00f3n simple de formularios</li> <li>Explicaci\u00f3n del proceso de desarrollo</li> </ul> <p>Criterios de evaluaci\u00f3n:</p> <ul> <li>Funcionalidad b\u00e1sica operativa</li> <li>Consumo correcto de API</li> <li>C\u00f3digo limpio y organizado</li> <li>Comprensi\u00f3n de conceptos fundamentales</li> </ul>"},{"location":"content/entrega/#1000-am-1100-am-evaluacion-plan-1-frontend","title":"\ud83d\udcdd 10:00 AM - 11:00 AM: Evaluaci\u00f3n Plan 1 (Frontend)","text":"<p>Duraci\u00f3n: 60 minutos Evaluaci\u00f3n de Conocimientos B\u00e1sicos Frontend</p> <p>Temas a evaluar:</p> <ul> <li>HTML5 b\u00e1sico: Elementos sem\u00e1nticos, estructura</li> <li>CSS3 fundamental: Layout b\u00e1sico, responsive simple</li> <li>JavaScript b\u00e1sico: Variables, funciones, eventos, fetch</li> <li>APIs REST: M\u00e9todos GET y POST</li> <li>Validaci\u00f3n de formularios: HTML5 y JavaScript simple</li> <li>Manejo de errores: Debugging b\u00e1sico</li> <li>DevTools: Uso b\u00e1sico de herramientas de desarrollo</li> </ul> <p>Formato de evaluaci\u00f3n:</p> <ul> <li>Preguntas te\u00f3ricas y pr\u00e1cticas</li> <li>Resoluci\u00f3n de problemas b\u00e1sicos</li> <li>Explicaci\u00f3n de conceptos fundamentales</li> </ul>"},{"location":"content/entrega/#1100-am-1200-pm-evaluacion-plan-2-backend","title":"\ud83d\udcdd 11:00 AM - 12:00 PM: Evaluaci\u00f3n Plan 2 (Backend)","text":"<p>Duraci\u00f3n: 60 minutos Evaluaci\u00f3n de Conocimientos Backend</p> <p>Temas a evaluar:</p> <ul> <li>TypeScript y NestJS: Decoradores, m\u00f3dulos, servicios</li> <li>APIs REST: Principios REST, m\u00e9todos HTTP</li> <li>Base de Datos y Prisma: Esquemas, relaciones, consultas</li> <li>Arquitectura NestJS: M\u00f3dulos, inyecci\u00f3n de dependencias</li> <li>DTOs y Class-Validator: Validaci\u00f3n y transformaci\u00f3n</li> <li>Manejo de errores: Debugging y excepciones</li> <li>Testing y documentaci\u00f3n: Pruebas b\u00e1sicas</li> </ul> <p>Formato de evaluaci\u00f3n:</p> <ul> <li>Preguntas te\u00f3ricas avanzadas</li> <li>An\u00e1lisis de c\u00f3digo</li> <li>Resoluci\u00f3n de problemas complejos</li> <li>Dise\u00f1o de arquitectura</li> </ul>"},{"location":"content/p0/","title":"Plan de Mejoramiento ( Programaci\u00f3n con Node.js y APIs REST): Creaci\u00f3n de una API REST para un Sistema de Asistencia de Estudiantes","text":""},{"location":"content/p0/#actividad-de-proyecto","title":"Actividad de Proyecto:","text":"<ul> <li>Programaci\u00f3n con Node.js y APIs REST</li> </ul>"},{"location":"content/p0/#competencia","title":"Competencia:","text":"<ul> <li>Estructurar propuesta t\u00e9cnica de servicio de tecnolog\u00eda de la informaci\u00f3n seg\u00fan requisitos t\u00e9cnicos y normativa 220501094</li> </ul>"},{"location":"content/p0/#resultado-de-aprendizaje","title":"Resultado de aprendizaje:","text":"<ul> <li>Validar las condiciones de la propuesta t\u00e9cnica del software de acuerdo con los intereses de las partes.</li> </ul> <p>Este plan de mejoramiento detalla la implementaci\u00f3n de una API RESTful para un sistema de asistencia de estudiantes, utilizando NestJS como framework backend, Prisma como ORM para manejar la base de datos, y MySQL como motor de base de datos. El sistema permitir\u00e1 gestionar la asistencia de estudiantes en un entorno educativo (por ejemplo, una escuela o universidad), registrando informaci\u00f3n sobre estudiantes, cursos, profesores y registros de asistencia. </p>"},{"location":"content/p0/#1-descripcion-general-del-sistema","title":"1. Descripci\u00f3n General del Sistema","text":"<p>El sistema de asistencia de estudiantes permitir\u00e1:</p> <ul> <li>Gestionar estudiantes: registrar, consultar, actualizar y eliminar informaci\u00f3n de estudiantes.</li> <li>Gestionar cursos: organizar asignaturas o clases en las que los estudiantes est\u00e1n inscritos.</li> <li>Gestionar profesores: registrar informaci\u00f3n de los docentes que imparten los cursos.</li> <li>Registrar asistencias: marcar la asistencia o ausencia de estudiantes en sesiones espec\u00edficas de un curso, con fecha y estado.</li> <li>Consultar reportes b\u00e1sicos, como asistencias por estudiante, curso o fecha.</li> </ul> <p>La API ser\u00e1 RESTful, utilizando verbos HTTP est\u00e1ndar (GET, POST, PUT, DELETE), respuestas en formato JSON y c\u00f3digos de estado HTTP apropiados (200 OK, 201 Created, 404 Not Found, 400 Bad Request). </p>"},{"location":"content/p0/#2-tecnologias-y-requisitos-previos","title":"2. Tecnolog\u00edas y Requisitos Previos","text":"<ul> <li>NestJS: Framework para estructurar la aplicaci\u00f3n en m\u00f3dulos, controladores, servicios e inyecci\u00f3n de dependencias. Usar la versi\u00f3n m\u00e1s reciente compatible (alrededor de v10 o superior en 2025).</li> <li>Prisma: ORM para definir el esquema de la base de datos, generar migraciones y realizar consultas type-safe.</li> <li>MySQL: Base de datos relacional. Usar una instancia local o en la nube (e.g., Docker o PlanetScale).</li> <li>Otras dependencias:</li> <li>@nestjs/common, @nestjs/core para el core de NestJS.</li> <li>@prisma/client para el cliente Prisma.</li> <li>class-validator y class-transformer para validaci\u00f3n de datos en los DTOs.</li> </ul> <p>Requisitos previos:</p> <ul> <li>Instalar Node.js (versi\u00f3n LTS, e.g., v20 o superior) y un gestor de paquetes (npm, yarn o pnpm).</li> <li>Instalar la CLI de NestJS globalmente.</li> <li>Configurar una base de datos MySQL local y una instancia remota. Crear una base de datos vac\u00eda llamada \"attendance_db\".</li> <li>Instalar la CLI de Prisma globalmente.</li> <li>Usar un editor de c\u00f3digo como VS Code con extensiones para NestJS y Prisma.</li> </ul>"},{"location":"content/p0/#3-diseno-de-la-base-de-datos-esquema-prisma","title":"3. Dise\u00f1o de la Base de Datos (Esquema Prisma)","text":"<p>Definir el esquema en un archivo <code>schema.prisma</code> en la ra\u00edz del proyecto. Este esquema modelar\u00e1 las entidades y relaciones necesarias.</p> <ul> <li> <p>Modelo Student:</p> <ul> <li>Campos: id (int, auto-incremental, primary key), firstName (string, requerido), lastName (string, requerido), email (string, opcional, \u00fanico, formato email), enrollmentNumber (string, requerido, \u00fanico), createdAt (datetime, default now), updatedAt (datetime, on update now).</li> <li>Relaciones: hasMany Attendance (registros de asistencia).</li> </ul> </li> <li> <p>Modelo Course:</p> <ul> <li>Campos: id (int, auto-incremental, primary key), name (string, requerido, \u00fanico), description (string, opcional), teacherId (int, requerido, foreign key a Teacher), createdAt (datetime, default now), updatedAt (datetime, on update now).</li> <li>Relaciones: belongsTo Teacher, hasMany Attendance.</li> </ul> </li> <li> <p>Modelo Teacher:</p> <ul> <li>Campos: id (int, auto-incremental, primary key), firstName (string, requerido), lastName (string, requerido), email (string, opcional, \u00fanico, formato email), createdAt (datetime, default now), updatedAt (datetime, on update now).</li> <li>Relaciones: hasMany Course.</li> </ul> </li> <li> <p>Modelo Attendance:</p> <ul> <li>Campos: id (int, auto-incremental, primary key), studentId (int, requerido, foreign key a Student), courseId (int, requerido, foreign key a Course), date (datetime, requerido, default now), status (enum: 'PRESENT' | 'ABSENT' | 'LATE', requerido), notes (string, opcional).</li> <li>Relaciones: belongsTo Student, belongsTo Course.</li> </ul> </li> </ul> <p>Configurar el datasource en el schema.prisma para MySQL, con la URL de conexi\u00f3n (e.g., mysql://user:pass@localhost:3306/attendance_db). Usar el provider \"mysql\".</p> <p>Generar el cliente Prisma y aplicar migraciones para crear las tablas en la base de datos tras definir el esquema.</p>"},{"location":"content/p0/#4-estructura-del-proyecto-en-nestjs","title":"4. Estructura del Proyecto en NestJS","text":"<p>Organizar el proyecto en una estructura modular est\u00e1ndar de NestJS para escalabilidad:</p> <ul> <li>src/: Carpeta principal de c\u00f3digo fuente.</li> <li>app.module.ts: M\u00f3dulo ra\u00edz que importa todos los dem\u00e1s m\u00f3dulos.</li> <li>main.ts: Punto de entrada para iniciar la app (escuchar en puerto 3000).</li> <li>prisma/: Carpeta para el servicio Prisma global (e.g., prisma.service.ts para inyectar el cliente Prisma).</li> <li>students/: M\u00f3dulo para estudiantes (students.module.ts, students.service.ts, students.controller.ts, DTOs como create-student.dto.ts y update-student.dto.ts).</li> <li>courses/: Similar al de estudiantes.</li> <li>teachers/: Similar.</li> <li>attendances/: Similar, con l\u00f3gica para validar registros de asistencia.</li> <li>prisma/schema.prisma: Esquema de la base de datos.</li> <li>Archivos de configuraci\u00f3n: .env para variables de entorno (e.g., DATABASE_URL), tsconfig.json para TypeScript.</li> </ul> <p>Usar DTOs (Data Transfer Objects) para validar y tipar los cuerpos de las requests (e.g., usando class-validator con decoradores como @IsString(), @IsEnum(), @IsEmail()).</p>"},{"location":"content/p0/#5-pasos-detallados-para-construir-la-api","title":"5. Pasos Detallados para Construir la API","text":"<p>Paso 1: Inicializaci\u00f3n del Proyecto</p> <ul> <li>Crear un nuevo proyecto NestJS usando la CLI (<code>nest new attendance-system</code>).</li> <li>Instalar dependencias: @nestjs/common, @nestjs/core, @prisma/client, prisma, class-validator, class-transformer.</li> <li>Configurar el archivo .env con la URL de conexi\u00f3n a MySQL (DATABASE_URL).</li> <li>Crear el esquema Prisma como se describi\u00f3 en la secci\u00f3n 3.</li> <li>Ejecutar <code>npx prisma generate</code> para generar el cliente Prisma y <code>npx prisma migrate dev</code> para aplicar migraciones y crear las tablas.</li> </ul> <p>Paso 2: Configuraci\u00f3n Global de Prisma</p> <ul> <li>Crear un servicio global (PrismaService) que extienda PrismaClient y se inyecte en la app.</li> </ul> <p>Paso 3: Creaci\u00f3n de M\u00f3dulos, Servicios y Controladores Para cada entidad (Students, Courses, Teachers, Attendances):</p> <ul> <li>Generar el m\u00f3dulo para cada entidad.</li> <li>En el servicio: Implementar m\u00e9todos CRUD (findAll, findOne, create, update, remove) usando Prisma. </li> <li>En el controlador: Definir rutas base y endpoints con decoradores @Get, @Post, @Put, @Delete.</li> <li>Crear DTOs para los bodies de POST y PUT.</li> </ul> <p>Paso 4: Definici\u00f3n Detallada de Endpoints</p> <p>Todos los endpoints responder\u00e1n en JSON, usando c\u00f3digos HTTP est\u00e1ndar y manejando errores (e.g., HttpException para 404 si no existe un recurso).</p> <ul> <li> <p>Estudiantes (/students):</p> <ul> <li>GET /students: Lista todos los estudiantes con conteo de asistencias (usar _count en Prisma). Incluir filtro opcional por query param: ?enrollmentNumber=string para buscar por n\u00famero de matr\u00edcula.</li> <li>GET /students/:id: Retorna un estudiante espec\u00edfico por ID, incluyendo asistencias asociadas.</li> <li>POST /students: Crea un nuevo estudiante. Body: {firstName: string, lastName: string, email?: string, enrollmentNumber: string}. Validar unicidad de email y enrollmentNumber.</li> <li>PUT /students/:id: Actualiza un estudiante. Body parcial: mismos campos que POST, opcionales.</li> <li>DELETE /students/:id: Elimina un estudiante, validando que no tenga asistencias asociadas.</li> </ul> </li> <li> <p>Cursos (/courses):</p> <ul> <li>GET /courses: Lista todos los cursos con su profesor y conteo de asistencias.</li> <li>GET /courses/:id: Retorna un curso espec\u00edfico con profesor y asistencias.</li> <li>POST /courses: Crea un nuevo curso. Body: {name: string, description?: string, teacherId: number}. Validar que teacherId exista.</li> <li>PUT /courses/:id: Actualiza un curso.</li> <li>DELETE /courses/:id: Elimina, validando que no tenga asistencias asociadas.</li> </ul> </li> <li> <p>Profesores (/teachers):</p> <ul> <li>GET /teachers: Lista todos los profesores con conteo de cursos asignados.</li> <li>GET /teachers/:id: Retorna un profesor espec\u00edfico con sus cursos.</li> <li>POST /teachers: Crea un nuevo profesor. Body: {firstName: string, lastName: string, email?: string}. Validar unicidad de email.</li> <li>PUT /teachers/:id: Actualiza.</li> <li>DELETE /teachers/:id: Elimina, validando que no tenga cursos asociados.</li> </ul> </li> <li> <p>Asistencias (/attendances):</p> <ul> <li>GET /attendances: Lista todos los registros de asistencia, con filtros opcionales: ?studentId=number, ?courseId=number, ?date=YYYY-MM-DD.</li> <li>GET /attendances/:id: Retorna un registro espec\u00edfico con estudiante y curso.</li> <li>POST /attendances: Crea un nuevo registro. Body: {studentId: number, courseId: number, status: 'PRESENT'|'ABSENT'|'LATE', date?: datetime, notes?: string}. Validar que studentId y courseId existan, y que no exista un registro para el mismo estudiante, curso y fecha.</li> <li>PUT /attendances/:id: Actualiza un registro (e.g., cambiar status o notes).</li> <li>DELETE /attendances/:id: Elimina un registro.</li> </ul> </li> </ul> <p>Paso 5: Pruebas</p> <ul> <li> <p>Probar endpoints con Postman o curl: Verificar cada operaci\u00f3n CRUD, respuestas JSON, c\u00f3digos HTTP y manejo de errores.</p> </li> <li> <p>Usar Prisma Studio para inspeccionar datos en la base de datos durante desarrollo.</p> </li> </ul>"},{"location":"content/p0/#6-condiciones-para-la-evaluacion-del-plan-de-mejoramiento","title":"6. Condiciones para la Evaluaci\u00f3n del Plan de Mejoramiento","text":"<p>Para evaluar el cumplimiento de este plan de mejoramiento, se aplicar\u00e1n las siguientes condiciones obligatorias. Estas aseguran que el aprendiz demuestre no solo la implementaci\u00f3n t\u00e9cnica, sino tambi\u00e9n la comprensi\u00f3n y la capacidad de ejecuci\u00f3n en tiempo real:</p> <ol> <li> <p>Entrega de la API RESTful Funcionando: El aprendiz debe entregar la API RESTful completamente operativa. Esto incluye un repositorio de c\u00f3digo fuente (En GitHub) con el proyecto completo, instrucciones para su ejecuci\u00f3n local (README con pasos para instalar dependencias, configurar la base de datos y correr el servidor). La API debe cumplir con todos los endpoints y l\u00f3gicas descritas, conectarse correctamente a MySQL v\u00eda Prisma. Demostrar la funcionalidad de la API mediante pruebas con Postman o curl. La duraci\u00f3n estimada de esta sesi\u00f3n es de 30 minutos.</p> </li> <li> <p>Realizaci\u00f3n del Proyecto desde Cero en Tiempo Real: El estudiante debe realizar todo el proyecto desde cero en una sesi\u00f3n en tiempo real, explicando cada paso para la creaci\u00f3n de la API REST full. Esto incluye: inicializaci\u00f3n del proyecto, configuraci\u00f3n de Prisma y MySQL, creaci\u00f3n de m\u00f3dulos, servicios, controladores y DTOs, definici\u00f3n de endpoints, implementaci\u00f3n de l\u00f3gica de negocio. La explicaci\u00f3n debe ser clara, detallada y secuencial, demostrando comprensi\u00f3n de cada componente. La duraci\u00f3n estimada de esta sesi\u00f3n es de 2 horas.</p> </li> <li> <p>Presentaci\u00f3n de una Evaluaci\u00f3n de Conocimientos: El estudiante debe presentar una evaluaci\u00f3n de conocimientos de todo lo visto durante el trimestre. Cubriendo temas como: conceptos b\u00e1sicos de NestJS (m\u00f3dulos, controladores, servicios), uso de Prisma (esquemas, migraciones, queries), MySQL (relaciones, enums), principios RESTful, validaci\u00f3n de datos, manejo de errores. La duraci\u00f3n estimada de esta evaluaci\u00f3n es de 1 horas.</p> </li> </ol> <p>Estas condiciones ser\u00e1n evaluadas por un instructor o evaluador, y el aprendiz debe cumplir con todas para aprobar el plan de mejoramiento. </p>"},{"location":"content/p1/","title":"Plan de Mejoramiento (Programaci\u00f3n con JavaScript): P\u00e1gina Web con Funcionalidades B\u00e1sicas para API REST","text":""},{"location":"content/p1/#actividad-de-proyecto","title":"Actividad de Proyecto:","text":"<ul> <li>Programaci\u00f3n con JavaScript</li> </ul>"},{"location":"content/p1/#competencia","title":"Competencia:","text":"<ul> <li>Evaluar requisitos de la soluci\u00f3n de software de acuerdo con metodolog\u00edas de an\u00e1lisis y est\u00e1ndares 220501093</li> </ul>"},{"location":"content/p1/#resultado-de-aprendizaje","title":"Resultado de aprendizaje:","text":"<ul> <li>Planear actividades de an\u00e1lisis de acuerdo con la metodolog\u00eda seleccionada.</li> </ul> <p>Este plan de mejoramiento detalla la implementaci\u00f3n de una p\u00e1gina web con funcionalidades b\u00e1sicas utilizando HTML5, CSS3 y JavaScript Vanilla para consumir la API RESTful del sistema de asistencia de estudiantes desarrollada en el plan anterior. La p\u00e1gina web proporcionar\u00e1 las operaciones fundamentales para gestionar estudiantes, cursos, profesores y registros de asistencia, priorizando la funcionalidad sobre la complejidad.</p>"},{"location":"content/p1/#1-descripcion-general-del-sistema-frontend","title":"1. Descripci\u00f3n General del Sistema Frontend","text":"<p>La aplicaci\u00f3n web permitir\u00e1:</p> <ul> <li>Gesti\u00f3n de estudiantes: Interfaz para listar, crear, editar y eliminar estudiantes con formularios de validaci\u00f3n.</li> <li>Gesti\u00f3n de cursos: Pantallas para administrar cursos, asignar profesores y visualizar informaci\u00f3n detallada.</li> <li>Gesti\u00f3n de profesores: M\u00f3dulo para registrar y mantener informaci\u00f3n de docentes.</li> <li>Registro de asistencias: Interfaz para marcar asistencia, consultar historial y generar reportes b\u00e1sicos.</li> <li>Dashboard principal: Panel de control con estad\u00edsticas generales y navegaci\u00f3n intuitiva.</li> </ul> <p>La aplicaci\u00f3n ser\u00e1 una aplicaci\u00f3n web multi-p\u00e1gina que utiliza p\u00e1ginas HTML separadas para cada m\u00f3dulo, comunicaci\u00f3n as\u00edncrona con la API mediante Fetch API, y navegaci\u00f3n tradicional entre p\u00e1ginas para crear una experiencia de usuario intuitiva y familiar.</p>"},{"location":"content/p1/#2-tecnologias-y-requisitos-previos","title":"2. Tecnolog\u00edas y Requisitos Previos","text":"<ul> <li>HTML5: Estructura b\u00e1sica de p\u00e1ginas web.</li> <li>CSS3: Estilos simples y responsive b\u00e1sico.</li> <li>JavaScript: Funcionalidades b\u00e1sicas y consumo de API.</li> <li>Fetch API: Comunicaci\u00f3n simple con la API REST.</li> </ul> <p>Requisitos previos:</p> <ul> <li>Tener la API REST de asistencia funcionando en localhost:3000 (del plan anterior).</li> <li>Navegador web moderno (Chrome, Firefox, Safari, Edge).</li> <li>Editor de c\u00f3digo (cualquier editor de texto o IDE).</li> <li>Servidor web local para desarrollo (Live Server o servidor HTTP simple).</li> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> </ul>"},{"location":"content/p1/#3-arquitectura-y-estructura-del-proyecto-frontend","title":"3. Arquitectura y Estructura del Proyecto Frontend","text":"<p>Organizar el proyecto en una estructura modular y escalable:</p> <pre><code>attendance-frontend/\n\u251c\u2500\u2500 index.html              # P\u00e1gina principal (Dashboard)\n\u251c\u2500\u2500 pages/\n\u2502   \u251c\u2500\u2500 students.html       # P\u00e1gina de gesti\u00f3n de estudiantes\n\u2502   \u251c\u2500\u2500 courses.html        # P\u00e1gina de gesti\u00f3n de cursos\n\u2502   \u251c\u2500\u2500 teachers.html       # P\u00e1gina de gesti\u00f3n de profesores\n\u2502   \u2514\u2500\u2500 attendances.html    # P\u00e1gina de gesti\u00f3n de asistencias\n\u251c\u2500\u2500 css/\n\u2502   \u2514\u2500\u2500 styles.css          # Estilos principales\n\u251c\u2500\u2500 js/\n\u2502   \u251c\u2500\u2500 common.js           # Funciones comunes a todas las p\u00e1ginas\n\u2502   \u251c\u2500\u2500 pages/\n\u2502   \u2502   \u251c\u2500\u2500 dashboard.js    # L\u00f3gica del dashboard principal\n\u2502   \u2502   \u251c\u2500\u2500 students.js     # L\u00f3gica de la p\u00e1gina de estudiantes\n\u2502   \u2502   \u251c\u2500\u2500 courses.js      # L\u00f3gica de la p\u00e1gina de cursos\n\u2502   \u2502   \u251c\u2500\u2500 teachers.js     # L\u00f3gica de la p\u00e1gina de profesores\n\u2502   \u2502   \u2514\u2500\u2500 attendances.js  # L\u00f3gica de la p\u00e1gina de asistencias\n\u2502   \u2514\u2500\u2500 utils/\n\u2502       \u251c\u2500\u2500 validation.js   # Funciones de validaci\u00f3n\n\u2502       \u251c\u2500\u2500 helpers.js      # Utilidades generales\n\u2502       \u2514\u2500\u2500 constants.js    # Constantes de la aplicaci\u00f3n\n\u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 images/            # Im\u00e1genes e iconos\n\u2502   \u2514\u2500\u2500 icons/             # Iconos SVG\n\u2514\u2500\u2500 README.md              # Documentaci\u00f3n del proyecto\n</code></pre>"},{"location":"content/p1/#4-diseno-basico-de-la-interfaz","title":"4. Dise\u00f1o B\u00e1sico de la Interfaz","text":"<p>Simplicidad de Dise\u00f1o:</p> <p>El estudiante debe crear una interfaz simple y funcional que permita realizar las operaciones b\u00e1sicas del sistema. El enfoque debe estar en la funcionalidad esencial m\u00e1s que en la complejidad visual.</p> <p>Componentes B\u00e1sicos Requeridos:</p> <ul> <li>Navegaci\u00f3n Simple: Enlaces o men\u00fa b\u00e1sico entre secciones</li> <li>Formularios B\u00e1sicos: Para crear nuevos registros (estudiantes, cursos, profesores)</li> <li>Listados Simples: Para mostrar los datos existentes</li> <li>Botones B\u00e1sicos: Para operaciones de crear y ver</li> <li>Mensajes Simples: Confirmaciones b\u00e1sicas de \u00e9xito o error</li> <li>Responsive B\u00e1sico: Funcionamiento en desktop y m\u00f3vil</li> </ul> <p>Opciones de Implementaci\u00f3n: - Puede usar CSS puro o framework simple - Dise\u00f1o minimalista y funcional - Puede ser single-page o multi-page seg\u00fan preferencia - Enfoque en usabilidad b\u00e1sica</p>"},{"location":"content/p1/#5-pasos-basicos-para-construir-la-pagina-web","title":"5. Pasos B\u00e1sicos para Construir la P\u00e1gina Web","text":"<p>Paso 1: Estructura HTML B\u00e1sica</p> <ul> <li>Crear <code>index.html</code> (p\u00e1gina principal) con estructura HTML5 simple.</li> <li>Crear p\u00e1ginas HTML b\u00e1sicas para cada m\u00f3dulo (students.html, courses.html, teachers.html, attendances.html).</li> <li>Definir contenedores b\u00e1sicos en cada p\u00e1gina: header, main, footer.</li> <li>Incluir meta tags b\u00e1sicos para responsividad.</li> <li>Configurar enlaces simples a archivos CSS y JavaScript.</li> <li>Implementar navegaci\u00f3n b\u00e1sica entre p\u00e1ginas usando enlaces tradicionales.</li> </ul> <p>Paso 2: Estilos CSS B\u00e1sicos</p> <ul> <li>CSS Simple: Estilos b\u00e1sicos para layout y presentaci\u00f3n</li> <li>Framework Opcional: Puede usar Bootstrap b\u00e1sico o CSS puro</li> <li>Responsive B\u00e1sico: Media queries simples para m\u00f3vil y desktop</li> <li>Componentes Simples: Estilos b\u00e1sicos para formularios, botones y tablas</li> <li>Colores Simples: Paleta de colores b\u00e1sica y legible</li> <li>Sin Animaciones Complejas: Enfoque en funcionalidad sobre efectos visuales</li> </ul> <p>Paso 3: JavaScript B\u00e1sico</p> <ul> <li>Crear <code>common.js</code> con funciones b\u00e1sicas compartidas.</li> <li>Crear archivos JavaScript simples para cada p\u00e1gina.</li> </ul> <p>Paso 4: P\u00e1ginas B\u00e1sicas</p> <p>Para cada p\u00e1gina HTML (students.html, courses.html, teachers.html, attendances.html):</p> <ul> <li>Estructura HTML: P\u00e1gina simple con navegaci\u00f3n y contenido principal.</li> <li>Listado: Tabla b\u00e1sica con datos de la API.</li> <li>Formularios: Formularios simples para creaci\u00f3n con validaci\u00f3n b\u00e1sica.</li> <li>JavaScript espec\u00edfico: Archivo JS b\u00e1sico para la l\u00f3gica de cada p\u00e1gina.</li> </ul> <p>Paso 5: Funcionalidades B\u00e1sicas por M\u00f3dulo</p> <ul> <li> <p>P\u00e1gina de Estudiantes (pages/students.html):</p> <ul> <li>Lista simple de estudiantes con informaci\u00f3n b\u00e1sica.</li> <li>Formulario b\u00e1sico de registro con validaci\u00f3n de campos requeridos.</li> <li>Bot\u00f3n para ver detalles de cada estudiante.</li> </ul> </li> <li> <p>P\u00e1gina de Cursos (pages/courses.html):</p> <ul> <li>Lista b\u00e1sica de cursos con informaci\u00f3n principal.</li> <li>Formulario simple de creaci\u00f3n de cursos.</li> <li>Informaci\u00f3n b\u00e1sica de cada curso.</li> </ul> </li> <li> <p>P\u00e1gina de Profesores (pages/teachers.html):</p> <ul> <li>Lista simple de profesores.</li> <li>Formulario b\u00e1sico de registro.</li> <li>Informaci\u00f3n de contacto b\u00e1sica.</li> </ul> </li> <li> <p>P\u00e1gina de Asistencias (pages/attendances.html):</p> <ul> <li>Lista simple de registros de asistencia.</li> <li>Formulario b\u00e1sico para registrar asistencia.</li> <li>Visualizaci\u00f3n simple por fecha y curso.</li> </ul> </li> </ul> <p>Paso 6: P\u00e1gina Principal B\u00e1sica</p> <ul> <li>Dashboard Simple: P\u00e1gina de inicio con navegaci\u00f3n b\u00e1sica</li> <li>Navegaci\u00f3n Requerida: Enlaces simples a todas las secciones principales</li> <li>Contenido B\u00e1sico: Informaci\u00f3n simple del sistema o bienvenida</li> <li>Funcionalidad Principal: Acceso directo a gesti\u00f3n de estudiantes, cursos, profesores y asistencias</li> <li>Dise\u00f1o Simple: Layout b\u00e1sico y funcional sin complejidades innecesarias</li> </ul>"},{"location":"content/p1/#6-implementacion-de-funcionalidades-basicas","title":"6. Implementaci\u00f3n de Funcionalidades B\u00e1sicas","text":""},{"location":"content/p1/#61-comunicacion-basica-con-la-api-rest","title":"6.1 Comunicaci\u00f3n B\u00e1sica con la API REST","text":"<p>Enfoque simple para consumir la API:</p> <p>Fetch API B\u00e1sico <pre><code>// Funci\u00f3n simple para obtener estudiantes\nasync function getStudents() {\n    try {\n        const response = await fetch('http://localhost:3000/api/students');\n        const students = await response.json();\n        return students;\n    } catch (error) {\n        alert('Error al cargar estudiantes');\n        console.error('Error:', error);\n    }\n}\n\n// Funci\u00f3n simple para crear estudiante\nasync function createStudent(studentData) {\n    try {\n        const response = await fetch('http://localhost:3000/api/students', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify(studentData)\n        });\n        const result = await response.json();\n        alert('Estudiante creado exitosamente');\n        return result;\n    } catch (error) {\n        alert('Error al crear estudiante');\n        console.error('Error:', error);\n    }\n}\n</code></pre></p> <p>Implementaci\u00f3n B\u00e1sica: - Usar fetch nativo de JavaScript - Funciones simples para GET y POST - Manejo b\u00e1sico de errores con alert() - Sin librer\u00edas externas complejas</p>"},{"location":"content/p1/#62-validacion-basica-de-formularios","title":"6.2 Validaci\u00f3n B\u00e1sica de Formularios","text":"<p>Validaci\u00f3n simple y directa:</p> <p>Validaci\u00f3n HTML5 B\u00e1sica <pre><code>&lt;!-- Formulario con validaci\u00f3n b\u00e1sica --&gt;\n&lt;form id=\"studentForm\"&gt;\n    &lt;input type=\"text\" name=\"nombre\" required placeholder=\"Nombre completo\"&gt;\n    &lt;input type=\"email\" name=\"email\" required placeholder=\"Email\"&gt;\n    &lt;input type=\"text\" name=\"documento\" required placeholder=\"Documento\"&gt;\n    &lt;button type=\"submit\"&gt;Crear Estudiante&lt;/button&gt;\n&lt;/form&gt;\n</code></pre></p> <p>Validaci\u00f3n JavaScript Simple <pre><code>// Validaci\u00f3n b\u00e1sica antes de enviar\nfunction validateStudent(formData) {\n    if (!formData.nombre || formData.nombre.trim() === '') {\n        alert('El nombre es requerido');\n        return false;\n    }\n    if (!formData.email || !formData.email.includes('@')) {\n        alert('Email inv\u00e1lido');\n        return false;\n    }\n    if (!formData.documento || formData.documento.trim() === '') {\n        alert('El documento es requerido');\n        return false;\n    }\n    return true;\n}\n</code></pre></p> <p>Validaci\u00f3n B\u00e1sica: - Usar atributos HTML5 (required, type=\"email\") - Validaci\u00f3n JavaScript simple con alert() - Verificar campos obligatorios \u00fanicamente - Sin librer\u00edas de validaci\u00f3n complejas</p>"},{"location":"content/p1/#7-condiciones-para-la-evaluacion-del-plan-de-mejoramiento","title":"7. Condiciones para la Evaluaci\u00f3n del Plan de Mejoramiento","text":"<p>Para evaluar el cumplimiento de este plan de mejoramiento con funcionalidades b\u00e1sicas, se aplicar\u00e1n las siguientes condiciones obligatorias:</p> <ol> <li> <p>Entrega de la P\u00e1gina Web Funcionando: El aprendiz debe entregar la p\u00e1gina web con funcionalidades b\u00e1sicas operativas. Esto incluye un repositorio de c\u00f3digo fuente (en GitHub) con el proyecto completo, instrucciones simples para su ejecuci\u00f3n local (README b\u00e1sico). La p\u00e1gina web debe consumir correctamente los endpoints b\u00e1sicos de la API REST (GET y POST), mostrar datos de forma simple, permitir operaciones b\u00e1sicas de consulta y creaci\u00f3n para las entidades principales (estudiantes, cursos, profesores, asistencias). El dise\u00f1o debe ser simple pero funcional. Demostrar las funcionalidades b\u00e1sicas navegando por las secciones principales. La duraci\u00f3n estimada de esta sesi\u00f3n es de 20 minutos.</p> </li> <li> <p>Desarrollo del Proyecto B\u00e1sico en Tiempo Real: El estudiante debe desarrollar la p\u00e1gina web b\u00e1sica desde cero en una sesi\u00f3n en tiempo real, explicando cada paso del proceso de desarrollo frontend con enfoque en simplicidad. Esto incluye: creaci\u00f3n de estructura HTML b\u00e1sica, implementaci\u00f3n de estilos CSS simples, desarrollo de JavaScript para funcionalidades b\u00e1sicas, integraci\u00f3n b\u00e1sica con la API REST (GET y POST), implementaci\u00f3n de operaciones de consulta y creaci\u00f3n, manejo b\u00e1sico de eventos y DOM, implementaci\u00f3n de validaci\u00f3n simple. La explicaci\u00f3n debe ser clara y pr\u00e1ctica, demostrando comprensi\u00f3n de los conceptos fundamentales. La duraci\u00f3n estimada de esta sesi\u00f3n es de 2 horas.</p> </li> <li> <p>Evaluaci\u00f3n de Conocimientos B\u00e1sicos Frontend: El estudiante debe presentar una evaluaci\u00f3n de conocimientos b\u00e1sicos sobre desarrollo frontend y consumo de APIs. Cubriendo temas como: JavaScript b\u00e1sico (variables, funciones, eventos, fetch), comunicaci\u00f3n b\u00e1sica con APIs REST (GET y POST), validaci\u00f3n simple de formularios, manejo b\u00e1sico de errores, debugging b\u00e1sico con DevTools. La duraci\u00f3n estimada de esta evaluaci\u00f3n es de 60 minutos.</p> </li> </ol> <p>Estas condiciones ser\u00e1n evaluadas por un instructor o evaluador, y el aprendiz debe cumplir con todas para aprobar el plan de mejoramiento. El enfoque est\u00e1 en demostrar competencias b\u00e1sicas s\u00f3lidas en lugar de funcionalidades complejas.</p>"},{"location":"content/rubrica-p0/","title":"R\u00fabricas de Evaluaci\u00f3n - Plan de Mejoramiento","text":""},{"location":"content/rubrica-p0/#desarrollo-backend-api-rest-con-nestjs","title":"Desarrollo Backend API REST con NestJS","text":""},{"location":"content/rubrica-p0/#1-rubrica-entrega-de-la-api-rest-funcionando","title":"1. R\u00fabrica: Entrega de la API REST Funcionando","text":"<p>Duraci\u00f3n: 30 minutos</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) Repositorio y Documentaci\u00f3n Repositorio completo en GitHub con README detallado, documentaci\u00f3n de API y instrucciones claras Repositorio completo con documentaci\u00f3n b\u00e1sica pero funcional Repositorio con archivos principales, documentaci\u00f3n m\u00ednima Repositorio incompleto, documentaci\u00f3n deficiente Sin repositorio o documentaci\u00f3n inexistente Endpoints CRUD Completos Todos los endpoints CRUD funcionan perfectamente para las 4 entidades (estudiantes, cursos, profesores, asistencias) La mayor\u00eda de endpoints funcionan correctamente Endpoints b\u00e1sicos funcionan, algunas limitaciones Pocos endpoints funcionan correctamente Endpoints no operativos o con fallas cr\u00edticas Base de Datos Base de datos bien estructurada, relaciones correctas, datos de prueba completos Base de datos funcional con estructura adecuada Base de datos b\u00e1sica pero operativa Base de datos con limitaciones estructurales Base de datos no funcional o mal estructurada Validaciones y Manejo de Errores Validaciones robustas, manejo completo de errores HTTP, respuestas consistentes Validaciones b\u00e1sicas, manejo adecuado de errores principales Validaciones m\u00ednimas, manejo b\u00e1sico de errores Validaciones limitadas, errores mal manejados Sin validaciones o manejo de errores Pruebas con Postman/Thunder Colecci\u00f3n completa de pruebas, todos los casos cubiertos, documentaci\u00f3n clara Pruebas principales funcionando, documentaci\u00f3n b\u00e1sica Pruebas b\u00e1sicas operativas Pruebas limitadas o incompletas Sin pruebas o no funcionan <p>Peso de la evaluaci\u00f3n: 30%</p>"},{"location":"content/rubrica-p0/#2-rubrica-desarrollo-del-proyecto-desde-cero-en-tiempo-real","title":"2. R\u00fabrica: Desarrollo del Proyecto desde Cero en Tiempo Real","text":"<p>Duraci\u00f3n: 2.5 horas</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) Configuraci\u00f3n del Entorno Configura Node.js, NestJS CLI, dependencias y estructura de proyecto expertamente Configuraci\u00f3n correcta con buenas pr\u00e1cticas Configuraci\u00f3n b\u00e1sica pero funcional Configuraci\u00f3n con algunos errores menores Configuraci\u00f3n deficiente o incorrecta Dise\u00f1o de Base de Datos (Prisma) Dise\u00f1a esquema Prisma \u00f3ptimo, relaciones correctas, migraciones adecuadas Dise\u00f1o de esquema funcional con relaciones apropiadas Dise\u00f1o b\u00e1sico de esquema que cumple requisitos Dise\u00f1o de esquema con limitaciones menores Dise\u00f1o de esquema deficiente o incorrecto Modelos de Datos (Prisma) Implementa modelos Prisma complejos, relaciones avanzadas, validaciones robustas Modelos bien estructurados con relaciones b\u00e1sicas Modelos funcionales que cumplen requisitos Modelos b\u00e1sicos con limitaciones Modelos deficientes o no funcionales Controladores y Servicios (NestJS) Implementa controladores y servicios bien organizados, inyecci\u00f3n de dependencias correcta Controladores y servicios funcionales con buena estructura Controladores y servicios b\u00e1sicos pero operativos Controladores y servicios simples con limitaciones Controladores y servicios deficientes o mal estructurados Implementaci\u00f3n CRUD CRUD completo, eficiente, con manejo avanzado de casos edge CRUD funcional para todas las entidades CRUD b\u00e1sico que cumple requisitos CRUD limitado con errores menores CRUD deficiente o incompleto DTOs y Validaciones DTOs complejos, validaciones con class-validator, transformaciones optimizadas DTOs b\u00e1sicos, validaciones funcionales DTOs m\u00ednimos pero operativos DTOs limitados Sin DTOs o validaciones deficientes Explicaci\u00f3n del Proceso Explica cada concepto claramente, demuestra comprensi\u00f3n profunda de arquitectura Explica la mayor\u00eda de conceptos con buena comprensi\u00f3n Explica conceptos b\u00e1sicos adecuadamente Explicaci\u00f3n limitada, comprensi\u00f3n b\u00e1sica Explicaci\u00f3n deficiente o incorrecta <p>Peso de la evaluaci\u00f3n: 50%</p>"},{"location":"content/rubrica-p0/#3-rubrica-evaluacion-de-conocimientos-backend","title":"3. R\u00fabrica: Evaluaci\u00f3n de Conocimientos Backend","text":"<p>Duraci\u00f3n: 1 hora</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) TypeScript y NestJS Dominio avanzado de TypeScript, NestJS y sus decoradores Conocimiento s\u00f3lido de TypeScript y NestJS b\u00e1sico Conocimiento b\u00e1sico de TypeScript y NestJS funcional Conocimiento limitado con errores menores Conocimiento deficiente de TypeScript/NestJS APIs REST Comprensi\u00f3n completa de principios REST, m\u00e9todos HTTP, mejores pr\u00e1cticas Conocimiento bueno de APIs REST y m\u00e9todos HTTP Conocimiento b\u00e1sico de APIs REST funcional Conocimiento limitado de REST Conocimiento deficiente de APIs REST Base de Datos y Prisma Dominio de BD relacionales, Prisma avanzado, optimizaci\u00f3n de consultas Conocimiento s\u00f3lido de BD y Prisma b\u00e1sico Conocimiento b\u00e1sico de BD y Prisma Conocimiento limitado de BD Conocimiento deficiente de BD/Prisma Arquitectura NestJS (M\u00f3dulos) Comprensi\u00f3n avanzada de m\u00f3dulos, inyecci\u00f3n de dependencias y arquitectura Conocimiento bueno de m\u00f3dulos y separaci\u00f3n de responsabilidades Conocimiento b\u00e1sico de arquitectura modular Conocimiento limitado de patrones Sin conocimiento de arquitectura DTOs y Class-Validator Dominio de DTOs complejos, class-validator y class-transformer Conocimiento bueno de DTOs y validaci\u00f3n Conocimiento b\u00e1sico de DTOs Conocimiento limitado de validaci\u00f3n Sin conocimiento de DTOs Manejo de Errores Comprensi\u00f3n avanzada de debugging, logging y manejo de excepciones Conocimiento bueno de manejo b\u00e1sico de errores Conocimiento b\u00e1sico de debugging Conocimiento limitado de errores Sin conocimiento de debugging Testing y Documentaci\u00f3n Dominio de testing automatizado, documentaci\u00f3n de APIs Conocimiento bueno de testing b\u00e1sico Conocimiento b\u00e1sico de pruebas Conocimiento limitado de testing Sin conocimiento de testing <p>Peso de la evaluaci\u00f3n: 20%</p>"},{"location":"content/rubrica-p0/#escala-de-calificacion-general","title":"Escala de Calificaci\u00f3n General","text":"Puntuaci\u00f3n Calificaci\u00f3n Descripci\u00f3n 4.5 - 5.0 Excelente Supera las expectativas, dominio completo 3.5 - 4.4 Bueno Cumple las expectativas, conocimiento s\u00f3lido 2.5 - 3.4 Satisfactorio Cumple los requisitos m\u00ednimos 1.5 - 2.4 Necesita Mejora Por debajo de las expectativas 1.0 - 1.4 Insuficiente No cumple los requisitos m\u00ednimos"},{"location":"content/rubrica-p0/#criterios-de-aprobacion","title":"Criterios de Aprobaci\u00f3n","text":"<ul> <li>Calificaci\u00f3n m\u00ednima para aprobar: 3.5 (Bueno)</li> </ul>"},{"location":"content/rubrica-p1/","title":"R\u00fabricas de Evaluaci\u00f3n - Plan de Mejoramiento","text":""},{"location":"content/rubrica-p1/#desarrollo-frontend-con-vanilla-javascript","title":"Desarrollo Frontend con Vanilla JavaScript","text":""},{"location":"content/rubrica-p1/#1-rubrica-entrega-de-la-pagina-web-funcionando","title":"1. R\u00fabrica: Entrega de la P\u00e1gina Web Funcionando","text":"<p>Duraci\u00f3n: 20 minutos</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) Repositorio y Documentaci\u00f3n Repositorio completo en GitHub con README detallado, instrucciones claras de instalaci\u00f3n y ejecuci\u00f3n Repositorio completo con README b\u00e1sico pero funcional Repositorio con archivos principales, README m\u00ednimo Repositorio incompleto, documentaci\u00f3n deficiente Sin repositorio o documentaci\u00f3n inexistente Consumo de API REST Consume correctamente todos los endpoints GET y POST, maneja respuestas adecuadamente Consume la mayor\u00eda de endpoints, manejo b\u00e1sico de respuestas Consume algunos endpoints principales, funcionalidad limitada Consume pocos endpoints, errores frecuentes No consume la API o fallas cr\u00edticas Funcionalidades B\u00e1sicas Todas las operaciones de consulta y creaci\u00f3n funcionan perfectamente para las 4 entidades La mayor\u00eda de operaciones funcionan, errores menores Operaciones b\u00e1sicas funcionan, algunas limitaciones Pocas operaciones funcionan correctamente Funcionalidades no operativas Interfaz de Usuario Dise\u00f1o simple, limpio y completamente funcional Dise\u00f1o b\u00e1sico pero funcional en su mayor\u00eda Interfaz simple con funcionalidad limitada Interfaz confusa o poco funcional Interfaz no funcional o inexistente Compatibilidad Funciona perfectamente en m\u00faltiples navegadores modernos Funciona bien en navegadores principales Funciona en algunos navegadores con limitaciones Funciona solo en un navegador espec\u00edfico No funciona en navegadores est\u00e1ndar <p>Peso de la evaluaci\u00f3n: 30%</p>"},{"location":"content/rubrica-p1/#2-rubrica-desarrollo-del-proyecto-basico-en-tiempo-real","title":"2. R\u00fabrica: Desarrollo del Proyecto B\u00e1sico en Tiempo Real","text":"<p>Duraci\u00f3n: 2 horas</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) Estructura HTML Crea estructura HTML sem\u00e1ntica, bien organizada y accesible Estructura HTML correcta con elementos apropiados Estructura HTML b\u00e1sica pero funcional Estructura HTML simple con algunos errores Estructura HTML deficiente o incorrecta Estilos CSS Implementa CSS bien estructurado, responsive y visualmente atractivo CSS organizado con dise\u00f1o responsive b\u00e1sico CSS simple pero funcional CSS b\u00e1sico con limitaciones de dise\u00f1o CSS deficiente o no funcional JavaScript B\u00e1sico C\u00f3digo JavaScript limpio, bien estructurado y eficiente JavaScript funcional con buena organizaci\u00f3n JavaScript b\u00e1sico que cumple los requisitos JavaScript simple con algunos errores JavaScript deficiente o no funcional Integraci\u00f3n con API Integraci\u00f3n perfecta con manejo de errores y estados de carga Integraci\u00f3n funcional con manejo b\u00e1sico de errores Integraci\u00f3n b\u00e1sica que funciona correctamente Integraci\u00f3n limitada con errores ocasionales Integraci\u00f3n deficiente o no funcional Explicaci\u00f3n del Proceso Explica cada paso claramente, demuestra comprensi\u00f3n profunda Explica la mayor\u00eda de pasos con buena comprensi\u00f3n Explica conceptos b\u00e1sicos adecuadamente Explicaci\u00f3n limitada, comprensi\u00f3n b\u00e1sica Explicaci\u00f3n deficiente o incorrecta Manejo de Eventos y DOM Manejo experto de eventos y manipulaci\u00f3n del DOM Manejo competente de eventos y DOM Manejo b\u00e1sico pero funcional Manejo limitado con errores menores Manejo deficiente del DOM y eventos Validaci\u00f3n Simple Implementa validaci\u00f3n robusta HTML5 y JavaScript Validaci\u00f3n funcional con HTML5 y JS b\u00e1sico Validaci\u00f3n b\u00e1sica que funciona Validaci\u00f3n limitada o inconsistente Sin validaci\u00f3n o no funcional <p>Peso de la evaluaci\u00f3n: 50%</p>"},{"location":"content/rubrica-p1/#3-rubrica-evaluacion-de-conocimientos-basicos-frontend","title":"3. R\u00fabrica: Evaluaci\u00f3n de Conocimientos B\u00e1sicos Frontend","text":"<p>Duraci\u00f3n: 45 minutos</p> Criterio Excelente (5) Bueno (4) Satisfactorio (3) Necesita Mejora (2) Insuficiente (1) HTML5 B\u00e1sico Dominio completo de elementos sem\u00e1nticos, atributos y estructura Conocimiento s\u00f3lido de HTML5 con aplicaci\u00f3n correcta Conocimiento b\u00e1sico de HTML5 funcional Conocimiento limitado con errores menores Conocimiento deficiente de HTML5 CSS3 Fundamental Dominio de layout, responsive design y propiedades avanzadas Conocimiento bueno de CSS con dise\u00f1o responsive Conocimiento b\u00e1sico de CSS funcional Conocimiento limitado de CSS Conocimiento deficiente de CSS JavaScript B\u00e1sico Dominio de variables, funciones, eventos y conceptos avanzados Conocimiento s\u00f3lido de JS con aplicaci\u00f3n correcta Conocimiento b\u00e1sico de JavaScript funcional Conocimiento limitado con errores Conocimiento deficiente de JavaScript APIs REST (GET/POST) Comprensi\u00f3n completa de HTTP, m\u00e9todos y mejores pr\u00e1cticas Conocimiento bueno de APIs y m\u00e9todos HTTP Conocimiento b\u00e1sico de consumo de APIs Conocimiento limitado de APIs Conocimiento deficiente de APIs Validaci\u00f3n de Formularios Dominio de validaci\u00f3n HTML5 y JavaScript avanzada Conocimiento bueno de validaci\u00f3n b\u00e1sica Conocimiento b\u00e1sico de validaci\u00f3n Conocimiento limitado de validaci\u00f3n Sin conocimiento de validaci\u00f3n Manejo de Errores Comprensi\u00f3n avanzada de debugging y manejo de errores Conocimiento bueno de manejo b\u00e1sico de errores Conocimiento b\u00e1sico de debugging Conocimiento limitado de errores Sin conocimiento de debugging DevTools Uso experto de herramientas de desarrollo Uso competente de DevTools b\u00e1sicas Uso b\u00e1sico de herramientas de desarrollo Uso limitado de DevTools No usa herramientas de desarrollo <p>Peso de la evaluaci\u00f3n: 20%</p>"},{"location":"content/rubrica-p1/#escala-de-calificacion-general","title":"Escala de Calificaci\u00f3n General","text":"Puntuaci\u00f3n Calificaci\u00f3n Descripci\u00f3n 4.5 - 5.0 Excelente Supera las expectativas, dominio completo 3.5 - 4.4 Bueno Cumple las expectativas, conocimiento s\u00f3lido 2.5 - 3.4 Satisfactorio Cumple los requisitos m\u00ednimos 1.5 - 2.4 Necesita Mejora Por debajo de las expectativas 1.0 - 1.4 Insuficiente No cumple los requisitos m\u00ednimos"},{"location":"content/rubrica-p1/#criterios-de-aprobacion","title":"Criterios de Aprobaci\u00f3n","text":"<ul> <li>Calificaci\u00f3n m\u00ednima para aprobar: 3.5 (Bueno)</li> </ul>"}]}